{"ast":null,"code":"var _jsxFileName = \"/home/majd/Desktop/react-ros2-robot/src/components/Camera.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nclass Camera extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n      console.log(\"connection established in RobotState Component!\");\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      });\n      console.log(\"connection is closed!\");\n\n      // reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.error(\"connection problem: \", error);\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.error(\"connection problem: \", error);\n    }\n  }\n  componentDidMount() {\n    this.getImage();\n  }\n  getImage() {\n    // subscriber for the velocities in camera topic\n    var image_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CAMERA_TOPIC,\n      messageType: Config.CAMERA_MSG_TYPE\n    });\n\n    // callback function for the camera\n    image_subscriber.subscribe(message => {\n      const imageUrl = \"data:image/jpeg;base64,\";\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, \"Mentoring\"))));\n  }\n}\nexport default Camera;","map":{"version":3,"names":["React","Component","Row","Col","Config","Camera","constructor","state","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","getImage","image_subscriber","Topic","name","CAMERA_TOPIC","messageType","CAMERA_MSG_TYPE","subscribe","message","imageUrl","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["/home/majd/Desktop/react-ros2-robot/src/components/Camera.jsx"],"sourcesContent":["import React, { Component} from \"react\";\nimport { Row, Col} from \"react-bootstrap\";\nimport Config from \"../scripts/config\"\n\nclass Camera extends Component{\n    state = {\n        ros: null,\n    };\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n    \n        this.state.ros.on(\"connection\", () => {\n            this.setState({ connected: true });\n            console.log(\"connection established in RobotState Component!\");\n        });\n    \n        this.state.ros.on(\"close\", () => {\n            this.setState({ connected: false });\n            console.log(\"connection is closed!\");\n\n            // reconnect every 5 seconds\n            setTimeout(() => {\n            try {\n                this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n            } \n            catch (error) {\n                console.error(\"connection problem: \", error);\n            }\n            }, Config.RECONNECTION_TIMER);\n        });\n    \n        try {\n            this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } \n        catch (error) {\n            console.error(\"connection problem: \", error);\n        }\n    }\n\n\n    componentDidMount() {\n        this.getImage();\n    }\n\n\n    getImage() {\n        // subscriber for the velocities in camera topic\n        var image_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CAMERA_TOPIC,\n            messageType: Config.CAMERA_MSG_TYPE,\n        });\n\n        // callback function for the camera\n        image_subscriber.subscribe((message) => {\n            const imageUrl=\"data:image/jpeg;base64,\"\n\n        });\n    }\n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col >\n                        <h3 className=\"mt-5\">Mentoring</h3>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Camera;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}