{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Joystick = void 0;\nvar React = require(\"react\");\nvar shape_enum_1 = require(\"./enums/shape.enum\");\nvar shape_factory_1 = require(\"./shapes/shape.factory\");\nvar shape_bounds_factory_1 = require(\"./shapes/shape.bounds.factory\");\nvar InteractionEvents;\n(function (InteractionEvents) {\n  InteractionEvents[\"PointerDown\"] = \"pointerdown\";\n  InteractionEvents[\"PointerMove\"] = \"pointermove\";\n  InteractionEvents[\"PointerUp\"] = \"pointerup\";\n})(InteractionEvents || (InteractionEvents = {}));\n/**\n * Radians identifying the direction of the joystick\n */\nvar RadianQuadrantBinding;\n(function (RadianQuadrantBinding) {\n  RadianQuadrantBinding[RadianQuadrantBinding[\"TopRight\"] = 2.35619449] = \"TopRight\";\n  RadianQuadrantBinding[RadianQuadrantBinding[\"TopLeft\"] = -2.35619449] = \"TopLeft\";\n  RadianQuadrantBinding[RadianQuadrantBinding[\"BottomRight\"] = 0.785398163] = \"BottomRight\";\n  RadianQuadrantBinding[RadianQuadrantBinding[\"BottomLeft\"] = -0.785398163] = \"BottomLeft\";\n})(RadianQuadrantBinding || (RadianQuadrantBinding = {}));\nvar Joystick = /** @class */function (_super) {\n  __extends(Joystick, _super);\n  function Joystick(props) {\n    var _this = _super.call(this, props) || this;\n    _this._stickRef = React.createRef();\n    _this._baseRef = React.createRef();\n    _this.frameId = null;\n    _this._pointerId = null;\n    _this._mounted = false;\n    /**\n     * Calculate X/Y and ArcTan within the bounds of the joystick\n     * @param event\n     * @private\n     */\n    _this._pointerMove = function (event) {\n      event.preventDefault();\n      if (_this.state.dragging) {\n        if (!_this.props.followCursor && event.pointerId !== _this._pointerId) return;\n        var absoluteX = event.clientX;\n        var absoluteY = event.clientY;\n        var relativeX = absoluteX - _this._parentRect.left - _this._radius;\n        var relativeY = absoluteY - _this._parentRect.top - _this._radius;\n        var dist = _this._distance(relativeX, relativeY);\n        // @ts-ignore\n        var bounded = (0, shape_bounds_factory_1.shapeBoundsFactory)(\n        //@ts-ignore\n        _this.props.controlPlaneShape || _this.props.baseShape, absoluteX, absoluteY, relativeX, relativeY, dist, _this._radius, _this._baseSize, _this._parentRect);\n        relativeX = bounded.relativeX;\n        relativeY = bounded.relativeY;\n        var atan2 = Math.atan2(relativeX, relativeY);\n        _this._updatePos({\n          relativeX: relativeX,\n          relativeY: relativeY,\n          distance: _this._distanceToPercentile(dist),\n          direction: _this._getDirection(atan2),\n          axisX: absoluteX - _this._parentRect.left,\n          axisY: absoluteY - _this._parentRect.top\n        });\n      }\n    };\n    /**\n     * Handle pointer up and de-register listen events\n     * @private\n     */\n    _this._pointerUp = function (event) {\n      if (event.pointerId !== _this._pointerId) return;\n      var stateUpdate = {\n        dragging: false\n      };\n      if (!_this.props.sticky) {\n        stateUpdate.coordinates = undefined;\n      }\n      _this.frameId = window.requestAnimationFrame(function () {\n        if (_this._mounted) {\n          _this.setState(stateUpdate);\n        }\n      });\n      window.removeEventListener(InteractionEvents.PointerUp, _this._pointerUp);\n      window.removeEventListener(InteractionEvents.PointerMove, _this._pointerMove);\n      _this._pointerId = null;\n      if (_this.props.stop) {\n        _this.props.stop({\n          type: \"stop\",\n          // @ts-ignore\n          x: _this.props.sticky ? _this.state.coordinates.relativeX * 2 / _this._baseSize : null,\n          // @ts-ignore\n          y: _this.props.sticky ? _this.state.coordinates.relativeY * 2 / _this._baseSize : null,\n          // @ts-ignore\n          direction: _this.props.sticky ? _this.state.coordinates.direction : null,\n          // @ts-ignore\n          distance: _this.props.sticky ? _this.state.coordinates.distance : null\n        });\n      }\n    };\n    _this.state = {\n      dragging: false\n    };\n    _this._throttleMoveCallback = function () {\n      var lastCall = 0;\n      return function (event) {\n        var now = new Date().getTime();\n        var throttleAmount = _this.props.throttle || 0;\n        if (now - lastCall < throttleAmount) {\n          return;\n        }\n        lastCall = now;\n        if (_this.props.move) {\n          return _this.props.move(event);\n        }\n      };\n    }();\n    return _this;\n  }\n  Joystick.prototype.componentWillUnmount = function () {\n    var _this = this;\n    this._mounted = false;\n    if (this.props.followCursor) {\n      window.removeEventListener(InteractionEvents.PointerMove, function (event) {\n        return _this._pointerMove(event);\n      });\n    }\n    if (this.frameId !== null) {\n      window.cancelAnimationFrame(this.frameId);\n    }\n  };\n  Joystick.prototype.componentDidMount = function () {\n    var _this = this;\n    this._mounted = true;\n    if (this.props.followCursor) {\n      //@ts-ignore\n      this._parentRect = this._baseRef.current.getBoundingClientRect();\n      this.setState({\n        dragging: true\n      });\n      window.addEventListener(InteractionEvents.PointerMove, function (event) {\n        return _this._pointerMove(event);\n      });\n      if (this.props.start) {\n        this.props.start({\n          type: \"start\",\n          x: null,\n          y: null,\n          distance: null,\n          direction: null\n        });\n      }\n    }\n  };\n  /**\n   * Update position of joystick - set state and trigger DOM manipulation\n   * @param coordinates\n   * @private\n   */\n  Joystick.prototype._updatePos = function (coordinates) {\n    var _this = this;\n    this.frameId = window.requestAnimationFrame(function () {\n      if (_this._mounted) {\n        _this.setState({\n          coordinates: coordinates\n        });\n      }\n    });\n    if (typeof this.props.minDistance === 'number') {\n      if (coordinates.distance < this.props.minDistance) {\n        return;\n      }\n    }\n    this._throttleMoveCallback({\n      type: \"move\",\n      x: coordinates.relativeX * 2 / this._baseSize,\n      y: -(coordinates.relativeY * 2 / this._baseSize),\n      direction: coordinates.direction,\n      distance: coordinates.distance\n    });\n  };\n  /**\n   * Handle pointerdown event\n   * @param e PointerEvent\n   * @private\n   */\n  Joystick.prototype._pointerDown = function (e) {\n    if (this.props.disabled || this.props.followCursor) {\n      return;\n    }\n    //@ts-ignore\n    this._parentRect = this._baseRef.current.getBoundingClientRect();\n    this.setState({\n      dragging: true\n    });\n    window.addEventListener(InteractionEvents.PointerUp, this._pointerUp);\n    window.addEventListener(InteractionEvents.PointerMove, this._pointerMove);\n    this._pointerId = e.pointerId;\n    //@ts-ignore\n    this._stickRef.current.setPointerCapture(e.pointerId);\n    if (this.props.start) {\n      this.props.start({\n        type: \"start\",\n        x: null,\n        y: null,\n        distance: null,\n        direction: null\n      });\n    }\n  };\n  /**\n   * Use ArcTan2 (4 Quadrant inverse tangent) to identify the direction the joystick is pointing\n   * https://docs.oracle.com/cd/B12037_01/olap.101/b10339/x_arcsin003.htm\n   * @param atan2: number\n   * @private\n   */\n  Joystick.prototype._getDirection = function (atan2) {\n    if (atan2 > RadianQuadrantBinding.TopRight || atan2 < RadianQuadrantBinding.TopLeft) {\n      return \"FORWARD\";\n    } else if (atan2 < RadianQuadrantBinding.TopRight && atan2 > RadianQuadrantBinding.BottomRight) {\n      return \"RIGHT\";\n    } else if (atan2 < RadianQuadrantBinding.BottomLeft) {\n      return \"LEFT\";\n    }\n    return \"BACKWARD\";\n  };\n  /**\n   * Hypotenuse distance calculation\n   * @param x: number\n   * @param y: number\n   * @private\n   */\n  Joystick.prototype._distance = function (x, y) {\n    return Math.hypot(x, y);\n  };\n  Joystick.prototype._distanceToPercentile = function (distance) {\n    var percentageBaseSize = distance / (this._baseSize / 2) * 100;\n    if (percentageBaseSize > 100) {\n      return 100;\n    }\n    return percentageBaseSize;\n  };\n  /**\n   * Get the shape stylings for the base\n   * @private\n   */\n  Joystick.prototype.getBaseShapeStyle = function () {\n    var shape = this.props.baseShape || shape_enum_1.JoystickShape.Circle;\n    return (0, shape_factory_1.shapeFactory)(shape, this._baseSize);\n  };\n  /**\n   * Get the shape stylings for the stick\n   * @private\n   */\n  Joystick.prototype.getStickShapeStyle = function () {\n    var shape = this.props.stickShape || shape_enum_1.JoystickShape.Circle;\n    return (0, shape_factory_1.shapeFactory)(shape, this._baseSize);\n  };\n  /**\n   * Calculate base styles for pad\n   * @private\n   */\n  Joystick.prototype._getBaseStyle = function () {\n    var baseColor = this.props.baseColor !== undefined ? this.props.baseColor : \"#000033\";\n    var baseSizeString = \"\".concat(this._baseSize, \"px\");\n    var padStyle = __assign(__assign({}, this.getBaseShapeStyle()), {\n      height: baseSizeString,\n      width: baseSizeString,\n      background: baseColor,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    });\n    if (this.props.baseImage) {\n      padStyle.background = \"url(\".concat(this.props.baseImage, \")\");\n      padStyle.backgroundSize = '100%';\n    }\n    return padStyle;\n  };\n  /**\n   * Calculate  base styles for joystick and translate\n   * @private\n   */\n  Joystick.prototype._getStickStyle = function () {\n    var stickColor = this.props.stickColor !== undefined ? this.props.stickColor : \"#3D59AB\";\n    var stickSize = this._stickSize ? \"\".concat(this._stickSize, \"px\") : \"\".concat(this._baseSize / 1.5, \"px\");\n    var stickStyle = __assign(__assign({}, this.getStickShapeStyle()), {\n      background: stickColor,\n      cursor: \"move\",\n      height: stickSize,\n      width: stickSize,\n      border: 'none',\n      flexShrink: 0,\n      touchAction: 'none'\n    });\n    if (this.props.stickImage) {\n      stickStyle.background = \"url(\".concat(this.props.stickImage, \")\");\n      stickStyle.backgroundSize = '100%';\n    }\n    if (this.props.pos) {\n      stickStyle = Object.assign({}, stickStyle, {\n        position: 'absolute',\n        transform: \"translate3d(\".concat(this.props.pos.x * this._baseSize / 2, \"px, \").concat(-(this.props.pos.y * this._baseSize) / 2, \"px, 0)\")\n      });\n    }\n    if (this.state.coordinates !== undefined) {\n      stickStyle = Object.assign({}, stickStyle, {\n        position: 'absolute',\n        transform: \"translate3d(\".concat(this.state.coordinates.relativeX, \"px, \").concat(this.state.coordinates.relativeY, \"px, 0)\")\n      });\n    }\n    return stickStyle;\n  };\n  Joystick.prototype.render = function () {\n    var _this = this;\n    this._baseSize = this.props.size || 100;\n    this._stickSize = this.props.stickSize;\n    this._radius = this._baseSize / 2;\n    var baseStyle = this._getBaseStyle();\n    var stickStyle = this._getStickStyle();\n    //@ts-ignore\n    return React.createElement(\"div\", {\n      \"data-testid\": \"joystick-base\",\n      className: this.props.disabled ? 'joystick-base-disabled' : '',\n      ref: this._baseRef,\n      style: baseStyle\n    }, React.createElement(\"button\", {\n      ref: this._stickRef,\n      disabled: this.props.disabled,\n      onPointerDown: function (event) {\n        return _this._pointerDown(event);\n      },\n      className: this.props.disabled ? 'joystick-disabled' : '',\n      style: stickStyle\n    }));\n  };\n  return Joystick;\n}(React.Component);\nexports.Joystick = Joystick;","map":null,"metadata":{},"sourceType":"script"}