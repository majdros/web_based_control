{"ast":null,"code":"var _jsxFileName = \"/home/majd/Desktop/react-ros2-robot/src/components/EmergencyStop.jsx\";\nimport React, { Component } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nclass EmergencyStop extends Component {\n  constructor(props) {\n    super(props);\n\n    // Wenn ros als prop übergeben wird, verwenden wir diese Verbindung\n    this.state = {\n      ros: null,\n      isActive: false\n    };\n    this.publishTimer = null;\n    if (props.ros) {\n      this.state.ros = props.ros;\n    } else {\n      // Andernfalls eigene Verbindung herstellen (weniger ideal)\n      this.init_connection();\n    }\n    // Korrekte Bindung der Funktionen\n    this.handleEmergencyStop = this.handleEmergencyStop.bind(this);\n    this.publishEmergencyState = this.publishEmergencyState.bind(this);\n    this.startPublishLoop = this.startPublishLoop.bind(this);\n    this.stopPublishLoop = this.stopPublishLoop.bind(this);\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n      console.log(\"connection established in EmergencyStop Component!\");\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      });\n      console.log(\"connection is closed!\");\n\n      // reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.error(\"connection problem: \", error);\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.error(\"connection problem: \", error);\n    }\n  }\n  componentDidMount() {\n    this.publishEmergencyState(false);\n  }\n\n  // Funktion zum Umschalten des Notfall-Stopps\n  handleEmergencyStop() {\n    const newState = !this.state.isActive;\n    this.setState({\n      isActive: newState\n    }, () => {\n      this.publishEmergencyState(newState);\n\n      // Timer starten oder stoppen\n      if (newState) {\n        this.startPublishLoop();\n      } else {\n        this.stopPublishLoop();\n      }\n    });\n  }\n\n  // Startet den Timer für regelmäßige Nachrichten\n  startPublishLoop() {\n    // Existierenden Timer beenden, falls vorhanden\n    this.stopPublishLoop();\n\n    // Neuen Timer starten, der alle 500ms sendet\n    this.publishTimer = setInterval(() => {\n      this.publishEmergencyState(true);\n    }, 100); // 500ms = 2x pro Sekunde\n\n    console.log(\"Started emergency message loop\");\n  }\n\n  // Stoppt den Timer\n  stopPublishLoop() {\n    if (this.publishTimer) {\n      clearInterval(this.publishTimer);\n      this.publishTimer = null;\n      console.log(\"Stopped emergency message loop\");\n    }\n  }\n\n  // Aufräumen beim Unmount der Komponente\n  componentWillUnmount() {\n    this.stopPublishLoop();\n  }\n\n  // Funktion zum Publizieren des Notfall-Stopp-Zustands\n  publishEmergencyState(isActive) {\n    if (!this.state.ros) {\n      console.error(\"No ROS connection available\");\n      return;\n    }\n    console.log(`Publishing emergency stop: ${isActive}`);\n\n    // Topic für den Notfall-Stopp\n    const emergencyStopTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.EMERGENCYSTOP_TOPIC,\n      messageType: Config.EMERGENCYSTOP_MSG_TYPE\n    });\n\n    // Bool-Nachricht erstellen\n    const message = new window.ROSLIB.Message({\n      data: isActive\n    });\n\n    // Nachricht veröffentlichen\n    emergencyStopTopic.publish(message);\n  }\n  render() {\n    // Styling basierend auf dem Zustand des Notfall-Stopps\n    const buttonVariant = this.state.isActive ? \"danger\" : \"success\";\n    const buttonText = this.state.isActive ? \"EMERGENCY STOP ACTIVATED\" : \"EMERGENCY STOP DEACTIVATED\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, \"Emergency\"), /*#__PURE__*/React.createElement(Button, {\n      variant: buttonVariant,\n      size: \"lg\",\n      style: {\n        width: '110%',\n        height: '100px',\n        fontSize: '1.3rem'\n      },\n      onClick: this.handleEmergencyStop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, buttonText))));\n  }\n}\nexport default EmergencyStop;","map":{"version":3,"names":["React","Component","Alert","Row","Col","Button","Config","EmergencyStop","constructor","props","state","ros","isActive","publishTimer","init_connection","handleEmergencyStop","bind","publishEmergencyState","startPublishLoop","stopPublishLoop","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","newState","setInterval","clearInterval","componentWillUnmount","emergencyStopTopic","Topic","name","EMERGENCYSTOP_TOPIC","messageType","EMERGENCYSTOP_MSG_TYPE","message","Message","data","publish","render","buttonVariant","buttonText","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","variant","size","style","width","height","fontSize","onClick"],"sources":["/home/majd/Desktop/react-ros2-robot/src/components/EmergencyStop.jsx"],"sourcesContent":["import React, { Component} from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { Row, Col, Button} from \"react-bootstrap\";\nimport Config from \"../scripts/config\"\n\n\n\nclass EmergencyStop extends Component{\n    state = { \n        ros: null,\n        isActive: false,\n    };\n\n    publishTimer = null;\n\n    constructor(props) {\n        super(props);\n        \n        // Wenn ros als prop übergeben wird, verwenden wir diese Verbindung\n        if (props.ros) {\n            this.state.ros = props.ros;\n        } else {\n            // Andernfalls eigene Verbindung herstellen (weniger ideal)\n            this.init_connection();\n        }\n        // Korrekte Bindung der Funktionen\n        this.handleEmergencyStop = this.handleEmergencyStop.bind(this);\n        this.publishEmergencyState = this.publishEmergencyState.bind(this);\n        this.startPublishLoop = this.startPublishLoop.bind(this);\n        this.stopPublishLoop = this.stopPublishLoop.bind(this);\n    }\n\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n    \n        this.state.ros.on(\"connection\", () => {\n            this.setState({ connected: true });\n            console.log(\"connection established in EmergencyStop Component!\");\n        });\n    \n        this.state.ros.on(\"close\", () => {\n            this.setState({ connected: false });\n            console.log(\"connection is closed!\");\n\n            // reconnect every 5 seconds\n            setTimeout(() => {\n            try {\n                this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n            } \n            catch (error) {\n                console.error(\"connection problem: \", error);\n            }\n            }, Config.RECONNECTION_TIMER);\n        });\n    \n        try {\n            this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } \n        catch (error) {\n            console.error(\"connection problem: \", error);\n        }\n    }\n\n\n    componentDidMount() {\n        this.publishEmergencyState(false);\n    }\n\n\n    // Funktion zum Umschalten des Notfall-Stopps\n    handleEmergencyStop() {\n        const newState = !this.state.isActive;\n        this.setState({ isActive: newState }, () => {\n            this.publishEmergencyState(newState);\n\n            // Timer starten oder stoppen\n            if (newState) {\n                this.startPublishLoop();\n            } else {\n                this.stopPublishLoop();\n            }\n        });\n    }\n\n\n    // Startet den Timer für regelmäßige Nachrichten\n    startPublishLoop() {\n        // Existierenden Timer beenden, falls vorhanden\n        this.stopPublishLoop();\n        \n        // Neuen Timer starten, der alle 500ms sendet\n        this.publishTimer = setInterval(() => {\n            this.publishEmergencyState(true);\n        }, 100); // 500ms = 2x pro Sekunde\n        \n        console.log(\"Started emergency message loop\");\n    }\n    \n    // Stoppt den Timer\n    stopPublishLoop() {\n        if (this.publishTimer) {\n            clearInterval(this.publishTimer);\n            this.publishTimer = null;\n            console.log(\"Stopped emergency message loop\");\n        }\n    }\n\n\n    // Aufräumen beim Unmount der Komponente\n    componentWillUnmount() {\n        this.stopPublishLoop();\n    }\n\n    // Funktion zum Publizieren des Notfall-Stopp-Zustands\n    publishEmergencyState(isActive) {\n        if (!this.state.ros) {\n            console.error(\"No ROS connection available\");\n            return;\n        }\n\n        console.log(`Publishing emergency stop: ${isActive}`);\n\n        // Topic für den Notfall-Stopp\n        const emergencyStopTopic = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.EMERGENCYSTOP_TOPIC,\n            messageType: Config.EMERGENCYSTOP_MSG_TYPE,\n        });\n\n        // Bool-Nachricht erstellen\n        const message = new window.ROSLIB.Message({\n            data: isActive\n        });\n\n        // Nachricht veröffentlichen\n        emergencyStopTopic.publish(message);\n    }\n\n\n    render() {\n        // Styling basierend auf dem Zustand des Notfall-Stopps\n        const buttonVariant = this.state.isActive ? \"danger\" : \"success\";\n        const buttonText = this.state.isActive ? \"EMERGENCY STOP ACTIVATED\" : \"EMERGENCY STOP DEACTIVATED\";\n        \n        return (\n            <div>\n                <Row>\n                    <Col>\n                        <h3 className=\"mt-4\">Emergency</h3>\n                        <Button \n                            variant={buttonVariant} \n                            size=\"lg\" \n                            style={{ \n                                width: '110%', \n                                height: '100px', \n                                fontSize: '1.3rem',\n                            }}\n                            onClick={this.handleEmergencyStop}\n                        >\n                            {buttonText}\n                        </Button>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n}\n\n\n\nexport default EmergencyStop;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}