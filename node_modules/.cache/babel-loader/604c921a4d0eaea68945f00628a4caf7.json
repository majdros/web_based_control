{"ast":null,"code":"/**\n * @fileOverview\n * @author Justin Young - justin@oodar.com.au\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action listener.\n *\n * Emits the following events:\n *  * 'status' - The status messages received from the action server.\n *  * 'feedback' - The feedback messages received from the action server.\n *  * 'result' - The result returned from the action server.\n *\n * @constructor\n * @param {Object} options\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\n */\nfunction ActionListener(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n\n  // create the topics associated with actionlib\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var feedbackListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  var statusListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  var resultListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  goalListener.subscribe(function (goalMessage) {\n    that.emit('goal', goalMessage);\n  });\n  statusListener.subscribe(function (statusMessage) {\n    statusMessage.status_list.forEach(function (status) {\n      that.emit('status', status);\n    });\n  });\n  feedbackListener.subscribe(function (feedbackMessage) {\n    that.emit('status', feedbackMessage.status);\n    that.emit('feedback', feedbackMessage.feedback);\n  });\n\n  // subscribe to the result topic\n  resultListener.subscribe(function (resultMessage) {\n    that.emit('status', resultMessage.status);\n    that.emit('result', resultMessage.result);\n  });\n}\nActionListener.prototype.__proto__ = EventEmitter2.prototype;\nmodule.exports = ActionListener;","map":null,"metadata":{},"sourceType":"script"}