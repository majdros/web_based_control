{"ast":null,"code":"/**\n * @fileOverview\n * @author Benjamin Pitzer - ben.pitzer@gmail.com\n * @author Russell Toris - rctoris@wpi.edu\n */\n\nvar Pose = require('../math/Pose');\nvar Vector3 = require('../math/Vector3');\nvar Quaternion = require('../math/Quaternion');\nvar UrdfCylinder = require('./UrdfCylinder');\nvar UrdfBox = require('./UrdfBox');\nvar UrdfMaterial = require('./UrdfMaterial');\nvar UrdfMesh = require('./UrdfMesh');\nvar UrdfSphere = require('./UrdfSphere');\n\n/**\n * A Visual element in a URDF.\n *\n * @constructor\n * @param {Object} options\n * @param {Element} options.xml - The XML element to parse.\n */\nfunction UrdfVisual(options) {\n  var xml = options.xml;\n  this.origin = null;\n  this.geometry = null;\n  this.material = null;\n  this.name = options.xml.getAttribute('name');\n\n  // Origin\n  var origins = xml.getElementsByTagName('origin');\n  if (origins.length === 0) {\n    // use the identity as the default\n    this.origin = new Pose();\n  } else {\n    // Check the XYZ\n    var xyz = origins[0].getAttribute('xyz');\n    var position = new Vector3();\n    if (xyz) {\n      xyz = xyz.split(' ');\n      position = new Vector3({\n        x: parseFloat(xyz[0]),\n        y: parseFloat(xyz[1]),\n        z: parseFloat(xyz[2])\n      });\n    }\n\n    // Check the RPY\n    var rpy = origins[0].getAttribute('rpy');\n    var orientation = new Quaternion();\n    if (rpy) {\n      rpy = rpy.split(' ');\n      // Convert from RPY\n      var roll = parseFloat(rpy[0]);\n      var pitch = parseFloat(rpy[1]);\n      var yaw = parseFloat(rpy[2]);\n      var phi = roll / 2.0;\n      var the = pitch / 2.0;\n      var psi = yaw / 2.0;\n      var x = Math.sin(phi) * Math.cos(the) * Math.cos(psi) - Math.cos(phi) * Math.sin(the) * Math.sin(psi);\n      var y = Math.cos(phi) * Math.sin(the) * Math.cos(psi) + Math.sin(phi) * Math.cos(the) * Math.sin(psi);\n      var z = Math.cos(phi) * Math.cos(the) * Math.sin(psi) - Math.sin(phi) * Math.sin(the) * Math.cos(psi);\n      var w = Math.cos(phi) * Math.cos(the) * Math.cos(psi) + Math.sin(phi) * Math.sin(the) * Math.sin(psi);\n      orientation = new Quaternion({\n        x: x,\n        y: y,\n        z: z,\n        w: w\n      });\n      orientation.normalize();\n    }\n    this.origin = new Pose({\n      position: position,\n      orientation: orientation\n    });\n  }\n\n  // Geometry\n  var geoms = xml.getElementsByTagName('geometry');\n  if (geoms.length > 0) {\n    var geom = geoms[0];\n    var shape = null;\n    // Check for the shape\n    for (var i = 0; i < geom.childNodes.length; i++) {\n      var node = geom.childNodes[i];\n      if (node.nodeType === 1) {\n        shape = node;\n        break;\n      }\n    }\n    // Check the type\n    var type = shape.nodeName;\n    if (type === 'sphere') {\n      this.geometry = new UrdfSphere({\n        xml: shape\n      });\n    } else if (type === 'box') {\n      this.geometry = new UrdfBox({\n        xml: shape\n      });\n    } else if (type === 'cylinder') {\n      this.geometry = new UrdfCylinder({\n        xml: shape\n      });\n    } else if (type === 'mesh') {\n      this.geometry = new UrdfMesh({\n        xml: shape\n      });\n    } else {\n      console.warn('Unknown geometry type ' + type);\n    }\n  }\n\n  // Material\n  var materials = xml.getElementsByTagName('material');\n  if (materials.length > 0) {\n    this.material = new UrdfMaterial({\n      xml: materials[0]\n    });\n  }\n}\nmodule.exports = UrdfVisual;","map":null,"metadata":{},"sourceType":"script"}