{"ast":null,"code":"/**\n * @fileOverview\n * @author David Gossow - dgossow@willowgarage.com\n */\n\n/**\n * A Quaternion.\n *\n * @constructor\n * @param {Object} options\n * @param {number} [options.x=0] - The x value.\n * @param {number} [options.y=0] - The y value.\n * @param {number} [options.z=0] - The z value.\n * @param {number} [options.w=1] - The w value.\n */\nfunction Quaternion(options) {\n  options = options || {};\n  this.x = options.x || 0;\n  this.y = options.y || 0;\n  this.z = options.z || 0;\n  this.w = typeof options.w === 'number' ? options.w : 1;\n}\n\n/**\n * Perform a conjugation on this quaternion.\n */\nQuaternion.prototype.conjugate = function () {\n  this.x *= -1;\n  this.y *= -1;\n  this.z *= -1;\n};\n\n/**\n * Return the norm of this quaternion.\n */\nQuaternion.prototype.norm = function () {\n  return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n};\n\n/**\n * Perform a normalization on this quaternion.\n */\nQuaternion.prototype.normalize = function () {\n  var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  if (l === 0) {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n  } else {\n    l = 1 / l;\n    this.x = this.x * l;\n    this.y = this.y * l;\n    this.z = this.z * l;\n    this.w = this.w * l;\n  }\n};\n\n/**\n * Convert this quaternion into its inverse.\n */\nQuaternion.prototype.invert = function () {\n  this.conjugate();\n  this.normalize();\n};\n\n/**\n * Set the values of this quaternion to the product of itself and the given quaternion.\n *\n * @param {Quaternion} q - The quaternion to multiply with.\n */\nQuaternion.prototype.multiply = function (q) {\n  var newX = this.x * q.w + this.y * q.z - this.z * q.y + this.w * q.x;\n  var newY = -this.x * q.z + this.y * q.w + this.z * q.x + this.w * q.y;\n  var newZ = this.x * q.y - this.y * q.x + this.z * q.w + this.w * q.z;\n  var newW = -this.x * q.x - this.y * q.y - this.z * q.z + this.w * q.w;\n  this.x = newX;\n  this.y = newY;\n  this.z = newZ;\n  this.w = newW;\n};\n\n/**\n * Clone a copy of this quaternion.\n *\n * @returns {Quaternion} The cloned quaternion.\n */\nQuaternion.prototype.clone = function () {\n  return new Quaternion(this);\n};\nmodule.exports = Quaternion;","map":null,"metadata":{},"sourceType":"script"}