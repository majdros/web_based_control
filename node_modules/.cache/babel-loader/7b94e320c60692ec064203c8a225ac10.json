{"ast":null,"code":"var _jsxFileName = \"/home/majd/Desktop/react-ros2-robot/src/components/RobotState.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Config from \"../scripts/config\";\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      linear_velocity: 0,\n      angular_velocity: 0\n    };\n    this.init_connection();\n  }\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      this.setState({\n        connected: true\n      });\n      console.log(\"connection established in RobotState Component!\");\n    });\n    this.state.ros.on(\"close\", () => {\n      this.setState({\n        connected: false\n      });\n      console.log(\"connection is closed!\");\n\n      // reconnect every 5 seconds\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } catch (error) {\n          console.error(\"connection problem: \", error);\n        }\n      }, Config.RECONNECTION_TIMER);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n    } catch (error) {\n      console.error(\"connection problem: \", error);\n    }\n  }\n  componentDidMount() {\n    this.getRobotState();\n  }\n  getRobotState() {\n    // subscriber for the velocities in odom topic\n    var velocity_subscriber = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.ODOM_TOPIC,\n      messageType: Config.ODOM_MSG_TYPE\n    });\n\n    // callback for the odom\n    velocity_subscriber.subscribe(message => {\n      this.setState({\n        linear_velocity: message.twist.twist.linear.x.toFixed(2)\n      });\n      this.setState({\n        angular_velocity: message.twist.twist.angular.z.toFixed(2)\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, \"Velocities\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, \" Linear Velocity: \", this.state.linear_velocity, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mt-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, \" Angular Velocity: \", this.state.angular_velocity, \" \"))));\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","Config","RobotState","constructor","state","ros","linear_velocity","angular_velocity","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","getRobotState","velocity_subscriber","Topic","name","ODOM_TOPIC","messageType","ODOM_MSG_TYPE","subscribe","message","twist","linear","x","toFixed","angular","z","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["/home/majd/Desktop/react-ros2-robot/src/components/RobotState.jsx"],"sourcesContent":["import React, { Component} from \"react\";\nimport { Row, Col} from \"react-bootstrap\";\nimport Config from \"../scripts/config\"\n\nclass RobotState extends Component{\n    state = {\n        ros: null,\n        linear_velocity: 0,\n        angular_velocity: 0,\n    };\n\n    constructor() {\n        super();\n        this.init_connection();\n    }\n\n    init_connection() {\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n    \n        this.state.ros.on(\"connection\", () => {\n            this.setState({ connected: true });\n            console.log(\"connection established in RobotState Component!\");\n        });\n    \n        this.state.ros.on(\"close\", () => {\n            this.setState({ connected: false });\n            console.log(\"connection is closed!\");\n\n            // reconnect every 5 seconds\n            setTimeout(() => {\n            try {\n                this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n            } \n            catch (error) {\n                console.error(\"connection problem: \", error);\n            }\n            }, Config.RECONNECTION_TIMER);\n        });\n    \n        try {\n            this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT + \"\");\n        } \n        catch (error) {\n            console.error(\"connection problem: \", error);\n        }\n    }\n\n\n    componentDidMount() {\n        this.getRobotState();\n    }\n\n\n    getRobotState() {\n        // subscriber for the velocities in odom topic\n        var velocity_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.ODOM_TOPIC,\n            messageType: Config.ODOM_MSG_TYPE,\n        });\n\n        // callback for the odom\n        velocity_subscriber.subscribe((message) => {\n            this.setState({linear_velocity: message.twist.twist.linear.x.toFixed(2)});\n            this.setState({angular_velocity: message.twist.twist.angular.z.toFixed(2)});\n        });\n    }\n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col >\n                        <h3 className=\"mt-5\">Velocities</h3>\n                        <p className=\"mt-0\"> Linear Velocity: {this.state.linear_velocity} </p>\n                        <p className=\"mt-0\"> Angular Velocity: {this.state.angular_velocity} </p>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default RobotState;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAO,OAAO;AACvC,SAASC,GAAG,EAAEC,GAAG,QAAO,iBAAiB;AACzC,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,MAAMC,UAAU,SAASJ,SAAS;EAO9BK,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IAAC,KAPZC,KAAK,GAAG;MACJC,GAAG,EAAE,IAAI;MACTC,eAAe,EAAE,CAAC;MAClBC,gBAAgB,EAAE;IACtB,CAAC;IAIG,IAAI,CAACC,eAAe,CAAC,CAAC;EAC1B;EAEAA,eAAeA,CAAA,EAAG;IACd,IAAI,CAACJ,KAAK,CAACC,GAAG,GAAG,IAAII,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC;IACxCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,KAAK,CAACC,GAAG,CAAC;IAE3B,IAAI,CAACD,KAAK,CAACC,GAAG,CAACS,EAAE,CAAC,YAAY,EAAE,MAAM;MAClC,IAAI,CAACC,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MAClCJ,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAClE,CAAC,CAAC;IAEF,IAAI,CAACT,KAAK,CAACC,GAAG,CAACS,EAAE,CAAC,OAAO,EAAE,MAAM;MAC7B,IAAI,CAACC,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;MACnCJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;MAEpC;MACAI,UAAU,CAAC,MAAM;QACjB,IAAI;UACA,IAAI,CAACb,KAAK,CAACC,GAAG,CAACa,OAAO,CAAC,OAAO,GAAGjB,MAAM,CAACkB,mBAAmB,GAAG,GAAG,GAAGlB,MAAM,CAACmB,qBAAqB,GAAG,EAAE,CAAC;QAC1G,CAAC,CACD,OAAOC,KAAK,EAAE;UACVT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAChD;MACA,CAAC,EAAEpB,MAAM,CAACqB,kBAAkB,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI;MACA,IAAI,CAAClB,KAAK,CAACC,GAAG,CAACa,OAAO,CAAC,OAAO,GAAGjB,MAAM,CAACkB,mBAAmB,GAAG,GAAG,GAAGlB,MAAM,CAACmB,qBAAqB,GAAG,EAAE,CAAC;IAC1G,CAAC,CACD,OAAOC,KAAK,EAAE;MACVT,OAAO,CAACS,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ;EAGAE,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB;EAGAA,aAAaA,CAAA,EAAG;IACZ;IACA,IAAIC,mBAAmB,GAAG,IAAIhB,MAAM,CAACC,MAAM,CAACgB,KAAK,CAAC;MAC9CrB,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnBsB,IAAI,EAAE1B,MAAM,CAAC2B,UAAU;MACvBC,WAAW,EAAE5B,MAAM,CAAC6B;IACxB,CAAC,CAAC;;IAEF;IACAL,mBAAmB,CAACM,SAAS,CAAEC,OAAO,IAAK;MACvC,IAAI,CAACjB,QAAQ,CAAC;QAACT,eAAe,EAAE0B,OAAO,CAACC,KAAK,CAACA,KAAK,CAACC,MAAM,CAACC,CAAC,CAACC,OAAO,CAAC,CAAC;MAAC,CAAC,CAAC;MACzE,IAAI,CAACrB,QAAQ,CAAC;QAACR,gBAAgB,EAAEyB,OAAO,CAACC,KAAK,CAACA,KAAK,CAACI,OAAO,CAACC,CAAC,CAACF,OAAO,CAAC,CAAC;MAAC,CAAC,CAAC;IAC/E,CAAC,CAAC;EACN;EAGAG,MAAMA,CAAA,EAAE;IACJ,oBACI1C,KAAA,CAAA2C,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACIjD,KAAA,CAAA2C,aAAA,CAACzC,GAAG;MAAA0C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACAjD,KAAA,CAAA2C,aAAA,CAACxC,GAAG;MAAAyC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACAjD,KAAA,CAAA2C,aAAA;MAAIO,SAAS,EAAC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,YAAc,CAAC,eACpCjD,KAAA,CAAA2C,aAAA;MAAGO,SAAS,EAAC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,oBAAkB,EAAC,IAAI,CAAC1C,KAAK,CAACE,eAAe,EAAC,GAAI,CAAC,eACvET,KAAA,CAAA2C,aAAA;MAAGO,SAAS,EAAC,MAAM;MAAAN,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,qBAAmB,EAAC,IAAI,CAAC1C,KAAK,CAACG,gBAAgB,EAAC,GAAI,CACvE,CACJ,CACJ,CAAC;EAEd;AACJ;AAEA,eAAeL,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module"}