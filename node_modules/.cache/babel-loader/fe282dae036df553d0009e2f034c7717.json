{"ast":null,"code":"/**\n * @fileOverview\n * @author Laura Lindzey - lindzey@gmail.com\n */\n\nvar Topic = require('../core/Topic');\nvar Message = require('../core/Message');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * An actionlib action server client.\n *\n * Emits the following events:\n *  * 'goal' - Goal sent by action client.\n *  * 'cancel' - Action client has canceled the request.\n *\n * @constructor\n * @param {Object} options\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\n * @param {string} options.serverName - The action server name, like '/fibonacci'.\n * @param {string} options.actionName - The action message name, like 'actionlib_tutorials/FibonacciAction'.\n */\nfunction SimpleActionServer(options) {\n  var that = this;\n  options = options || {};\n  this.ros = options.ros;\n  this.serverName = options.serverName;\n  this.actionName = options.actionName;\n\n  // create and advertise publishers\n  this.feedbackPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/feedback',\n    messageType: this.actionName + 'Feedback'\n  });\n  this.feedbackPublisher.advertise();\n  var statusPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/status',\n    messageType: 'actionlib_msgs/GoalStatusArray'\n  });\n  statusPublisher.advertise();\n  this.resultPublisher = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/result',\n    messageType: this.actionName + 'Result'\n  });\n  this.resultPublisher.advertise();\n\n  // create and subscribe to listeners\n  var goalListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/goal',\n    messageType: this.actionName + 'Goal'\n  });\n  var cancelListener = new Topic({\n    ros: this.ros,\n    name: this.serverName + '/cancel',\n    messageType: 'actionlib_msgs/GoalID'\n  });\n\n  // Track the goals and their status in order to publish status...\n  this.statusMessage = new Message({\n    header: {\n      stamp: {\n        secs: 0,\n        nsecs: 100\n      },\n      frame_id: ''\n    },\n    status_list: []\n  });\n\n  // needed for handling preemption prompted by a new goal being received\n  this.currentGoal = null; // currently tracked goal\n  this.nextGoal = null; // the one that'll be preempting\n\n  goalListener.subscribe(function (goalMessage) {\n    if (that.currentGoal) {\n      that.nextGoal = goalMessage;\n      // needs to happen AFTER rest is set up\n      that.emit('cancel');\n    } else {\n      that.statusMessage.status_list = [{\n        goal_id: goalMessage.goal_id,\n        status: 1\n      }];\n      that.currentGoal = goalMessage;\n      that.emit('goal', goalMessage.goal);\n    }\n  });\n\n  // helper function to determine ordering of timestamps\n  // returns t1 < t2\n  var isEarlier = function (t1, t2) {\n    if (t1.secs > t2.secs) {\n      return false;\n    } else if (t1.secs < t2.secs) {\n      return true;\n    } else if (t1.nsecs < t2.nsecs) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  // TODO: this may be more complicated than necessary, since I'm\n  // not sure if the callbacks can ever wind up with a scenario\n  // where we've been preempted by a next goal, it hasn't finished\n  // processing, and then we get a cancel message\n  cancelListener.subscribe(function (cancelMessage) {\n    // cancel ALL goals if both empty\n    if (cancelMessage.stamp.secs === 0 && cancelMessage.stamp.secs === 0 && cancelMessage.id === '') {\n      that.nextGoal = null;\n      if (that.currentGoal) {\n        that.emit('cancel');\n      }\n    } else {\n      // treat id and stamp independently\n      if (that.currentGoal && cancelMessage.id === that.currentGoal.goal_id.id) {\n        that.emit('cancel');\n      } else if (that.nextGoal && cancelMessage.id === that.nextGoal.goal_id.id) {\n        that.nextGoal = null;\n      }\n      if (that.nextGoal && isEarlier(that.nextGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.nextGoal = null;\n      }\n      if (that.currentGoal && isEarlier(that.currentGoal.goal_id.stamp, cancelMessage.stamp)) {\n        that.emit('cancel');\n      }\n    }\n  });\n\n  // publish status at pseudo-fixed rate; required for clients to know they've connected\n  var statusInterval = setInterval(function () {\n    var currentTime = new Date();\n    var secs = Math.floor(currentTime.getTime() / 1000);\n    var nsecs = Math.round(1000000000 * (currentTime.getTime() / 1000 - secs));\n    that.statusMessage.header.stamp.secs = secs;\n    that.statusMessage.header.stamp.nsecs = nsecs;\n    statusPublisher.publish(that.statusMessage);\n  }, 500); // publish every 500ms\n}\nSimpleActionServer.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Set action state to succeeded and return to client.\n *\n * @param {Object} result - The result to return to the client.\n */\nSimpleActionServer.prototype.setSucceeded = function (result) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 3\n    },\n    result: result\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n\n/**\n * Set action state to aborted and return to client.\n *\n * @param {Object} result - The result to return to the client.\n */\nSimpleActionServer.prototype.setAborted = function (result) {\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 4\n    },\n    result: result\n  });\n  this.resultPublisher.publish(resultMessage);\n  this.statusMessage.status_list = [];\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\n\n/**\n * Send a feedback message.\n *\n * @param {Object} feedback - The feedback to send to the client.\n */\nSimpleActionServer.prototype.sendFeedback = function (feedback) {\n  var feedbackMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 1\n    },\n    feedback: feedback\n  });\n  this.feedbackPublisher.publish(feedbackMessage);\n};\n\n/**\n * Handle case where client requests preemption.\n */\nSimpleActionServer.prototype.setPreempted = function () {\n  this.statusMessage.status_list = [];\n  var resultMessage = new Message({\n    status: {\n      goal_id: this.currentGoal.goal_id,\n      status: 2\n    }\n  });\n  this.resultPublisher.publish(resultMessage);\n  if (this.nextGoal) {\n    this.currentGoal = this.nextGoal;\n    this.nextGoal = null;\n    this.emit('goal', this.currentGoal.goal);\n  } else {\n    this.currentGoal = null;\n  }\n};\nmodule.exports = SimpleActionServer;","map":null,"metadata":{},"sourceType":"script"}