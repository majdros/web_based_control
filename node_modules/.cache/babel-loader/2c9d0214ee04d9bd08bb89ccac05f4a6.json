{"ast":null,"code":"/**\n * @fileOverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\nvar Message = require('./Message');\n\n/**\n * Publish and/or subscribe to a topic in ROS.\n *\n * Emits the following events:\n *  * 'warning' - If there are any warning during the Topic creation.\n *  * 'message' - The message data from rosbridge.\n *\n * @constructor\n * @param {Object} options\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\n * @param {string} options.name - The topic name, like '/cmd_vel'.\n * @param {string} options.messageType - The message type, like 'std_msgs/String'.\n * @param {string} [options.compression=none] - The type of compression to use, like 'png', 'cbor', or 'cbor-raw'.\n * @param {number} [options.throttle_rate=0] - The rate (in ms in between messages) at which to throttle the topics.\n * @param {number} [options.queue_size=100] - The queue created at bridge side for re-publishing webtopics.\n * @param {boolean} [options.latch=false] - Latch the topic when publishing.\n * @param {number} [options.queue_length=0] - The queue length at bridge side used when subscribing.\n * @param {boolean} [options.reconnect_on_close=true] - The flag to enable resubscription and readvertisement on close event.\n */\nfunction Topic(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.messageType = options.messageType;\n  this.isAdvertised = false;\n  this.compression = options.compression || 'none';\n  this.throttle_rate = options.throttle_rate || 0;\n  this.latch = options.latch || false;\n  this.queue_size = options.queue_size || 100;\n  this.queue_length = options.queue_length || 0;\n  this.reconnect_on_close = options.reconnect_on_close !== undefined ? options.reconnect_on_close : true;\n\n  // Check for valid compression types\n  if (this.compression && this.compression !== 'png' && this.compression !== 'cbor' && this.compression !== 'cbor-raw' && this.compression !== 'none') {\n    this.emit('warning', this.compression + ' compression is not supported. No compression will be used.');\n    this.compression = 'none';\n  }\n\n  // Check if throttle rate is negative\n  if (this.throttle_rate < 0) {\n    this.emit('warning', this.throttle_rate + ' is not allowed. Set to 0');\n    this.throttle_rate = 0;\n  }\n  var that = this;\n  if (this.reconnect_on_close) {\n    this.callForSubscribeAndAdvertise = function (message) {\n      that.ros.callOnConnection(message);\n      that.waitForReconnect = false;\n      that.reconnectFunc = function () {\n        if (!that.waitForReconnect) {\n          that.waitForReconnect = true;\n          that.ros.callOnConnection(message);\n          that.ros.once('connection', function () {\n            that.waitForReconnect = false;\n          });\n        }\n      };\n      that.ros.on('close', that.reconnectFunc);\n    };\n  } else {\n    this.callForSubscribeAndAdvertise = this.ros.callOnConnection;\n  }\n  this._messageCallback = function (data) {\n    that.emit('message', new Message(data));\n  };\n}\nTopic.prototype.__proto__ = EventEmitter2.prototype;\n\n/**\n * Every time a message is published for the given topic, the callback\n * will be called with the message object.\n *\n * @param {function} callback - Function with the following params:\n * @param {Object} callback.message - The published message.\n */\nTopic.prototype.subscribe = function (callback) {\n  if (typeof callback === 'function') {\n    this.on('message', callback);\n  }\n  if (this.subscribeId) {\n    return;\n  }\n  this.ros.on(this.name, this._messageCallback);\n  this.subscribeId = 'subscribe:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'subscribe',\n    id: this.subscribeId,\n    type: this.messageType,\n    topic: this.name,\n    compression: this.compression,\n    throttle_rate: this.throttle_rate,\n    queue_length: this.queue_length\n  });\n};\n\n/**\n * Unregister as a subscriber for the topic. Unsubscribing will stop\n * and remove all subscribe callbacks. To remove a callback, you must\n * explicitly pass the callback function in.\n *\n * @param {function} [callback] - The callback to unregister, if\n *     provided and other listeners are registered the topic won't\n *     unsubscribe, just stop emitting to the passed listener.\n */\nTopic.prototype.unsubscribe = function (callback) {\n  if (callback) {\n    this.off('message', callback);\n    // If there is any other callbacks still subscribed don't unsubscribe\n    if (this.listeners('message').length) {\n      return;\n    }\n  }\n  if (!this.subscribeId) {\n    return;\n  }\n  // Note: Don't call this.removeAllListeners, allow client to handle that themselves\n  this.ros.off(this.name, this._messageCallback);\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unsubscribe');\n  this.ros.callOnConnection({\n    op: 'unsubscribe',\n    id: this.subscribeId,\n    topic: this.name\n  });\n  this.subscribeId = null;\n};\n\n/**\n * Register as a publisher for the topic.\n */\nTopic.prototype.advertise = function () {\n  if (this.isAdvertised) {\n    return;\n  }\n  this.advertiseId = 'advertise:' + this.name + ':' + ++this.ros.idCounter;\n  this.callForSubscribeAndAdvertise({\n    op: 'advertise',\n    id: this.advertiseId,\n    type: this.messageType,\n    topic: this.name,\n    latch: this.latch,\n    queue_size: this.queue_size\n  });\n  this.isAdvertised = true;\n  if (!this.reconnect_on_close) {\n    var that = this;\n    this.ros.on('close', function () {\n      that.isAdvertised = false;\n    });\n  }\n};\n\n/**\n * Unregister as a publisher for the topic.\n */\nTopic.prototype.unadvertise = function () {\n  if (!this.isAdvertised) {\n    return;\n  }\n  if (this.reconnect_on_close) {\n    this.ros.off('close', this.reconnectFunc);\n  }\n  this.emit('unadvertise');\n  this.ros.callOnConnection({\n    op: 'unadvertise',\n    id: this.advertiseId,\n    topic: this.name\n  });\n  this.isAdvertised = false;\n};\n\n/**\n * Publish the message.\n *\n * @param {Message} message - A ROSLIB.Message object.\n */\nTopic.prototype.publish = function (message) {\n  if (!this.isAdvertised) {\n    this.advertise();\n  }\n  this.ros.idCounter++;\n  var call = {\n    op: 'publish',\n    id: 'publish:' + this.name + ':' + this.ros.idCounter,\n    topic: this.name,\n    msg: message,\n    latch: this.latch\n  };\n  this.ros.callOnConnection(call);\n};\nmodule.exports = Topic;","map":null,"metadata":{},"sourceType":"script"}