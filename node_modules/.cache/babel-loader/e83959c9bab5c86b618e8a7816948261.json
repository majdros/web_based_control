{"ast":null,"code":"/**\n * @fileOverview\n * @author Brandon Alexander - baalexander@gmail.com\n */\n\nvar ServiceResponse = require('./ServiceResponse');\nvar ServiceRequest = require('./ServiceRequest');\nvar EventEmitter2 = require('eventemitter2').EventEmitter2;\n\n/**\n * A ROS service client.\n *\n * @constructor\n * @param {Object} options\n * @param {Ros} options.ros - The ROSLIB.Ros connection handle.\n * @param {string} options.name - The service name, like '/add_two_ints'.\n * @param {string} options.serviceType - The service type, like 'rospy_tutorials/AddTwoInts'.\n */\nfunction Service(options) {\n  options = options || {};\n  this.ros = options.ros;\n  this.name = options.name;\n  this.serviceType = options.serviceType;\n  this.isAdvertised = false;\n  this._serviceCallback = null;\n}\nService.prototype.__proto__ = EventEmitter2.prototype;\n/**\n * Call the service. Returns the service response in the\n * callback. Does nothing if this service is currently advertised.\n *\n * @param {ServiceRequest} request - The ROSLIB.ServiceRequest to send.\n * @param {function} callback - Function with the following params:\n * @param {Object} callback.response - The response from the service request.\n * @param {function} [failedCallback] - The callback function when the service call failed with params:\n * @param {string} failedCallback.error - The error message reported by ROS.\n */\nService.prototype.callService = function (request, callback, failedCallback) {\n  if (this.isAdvertised) {\n    return;\n  }\n  var serviceCallId = 'call_service:' + this.name + ':' + ++this.ros.idCounter;\n  if (callback || failedCallback) {\n    this.ros.once(serviceCallId, function (message) {\n      if (message.result !== undefined && message.result === false) {\n        if (typeof failedCallback === 'function') {\n          failedCallback(message.values);\n        }\n      } else if (typeof callback === 'function') {\n        callback(new ServiceResponse(message.values));\n      }\n    });\n  }\n  var call = {\n    op: 'call_service',\n    id: serviceCallId,\n    service: this.name,\n    type: this.serviceType,\n    args: request\n  };\n  this.ros.callOnConnection(call);\n};\n\n/**\n * Advertise the service. This turns the Service object from a client\n * into a server. The callback will be called with every request\n * that's made on this service.\n *\n * @param {function} callback - This works similarly to the callback for a C++ service and should take the following params:\n * @param {ServiceRequest} callback.request - The service request.\n * @param {Object} callback.response - An empty dictionary. Take care not to overwrite this. Instead, only modify the values within.\n *     It should return true if the service has finished successfully,\n *     i.e., without any fatal errors.\n */\nService.prototype.advertise = function (callback) {\n  if (this.isAdvertised || typeof callback !== 'function') {\n    return;\n  }\n  this._serviceCallback = callback;\n  this.ros.on(this.name, this._serviceResponse.bind(this));\n  this.ros.callOnConnection({\n    op: 'advertise_service',\n    type: this.serviceType,\n    service: this.name\n  });\n  this.isAdvertised = true;\n};\nService.prototype.unadvertise = function () {\n  if (!this.isAdvertised) {\n    return;\n  }\n  this.ros.callOnConnection({\n    op: 'unadvertise_service',\n    service: this.name\n  });\n  this.isAdvertised = false;\n};\nService.prototype._serviceResponse = function (rosbridgeRequest) {\n  var response = {};\n  var success = this._serviceCallback(rosbridgeRequest.args, response);\n  var call = {\n    op: 'service_response',\n    service: this.name,\n    values: new ServiceResponse(response),\n    result: success\n  };\n  if (rosbridgeRequest.id) {\n    call.id = rosbridgeRequest.id;\n  }\n  this.ros.callOnConnection(call);\n};\nmodule.exports = Service;","map":null,"metadata":{},"sourceType":"script"}