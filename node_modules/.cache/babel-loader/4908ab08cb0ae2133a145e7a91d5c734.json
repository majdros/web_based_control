{"ast":null,"code":"try {\n  var work = require('webworkify');\n} catch (ReferenceError) {\n  // webworkify raises ReferenceError when required inside webpack\n  var work = require('webworkify-webpack');\n}\nvar workerSocketImpl = require('./workerSocketImpl');\nfunction WorkerSocket(uri) {\n  this.socket_ = work(workerSocketImpl);\n  this.socket_.addEventListener('message', this.handleWorkerMessage_.bind(this));\n  this.socket_.postMessage({\n    uri: uri\n  });\n}\nWorkerSocket.prototype.handleWorkerMessage_ = function (ev) {\n  var data = ev.data;\n  if (data instanceof ArrayBuffer || typeof data === 'string') {\n    // binary or JSON message from rosbridge\n    this.onmessage(ev);\n  } else {\n    // control message from the wrapped WebSocket\n    var type = data.type;\n    if (type === 'close') {\n      this.onclose(null);\n    } else if (type === 'open') {\n      this.onopen(null);\n    } else if (type === 'error') {\n      this.onerror(null);\n    } else {\n      throw 'Unknown message from workersocket';\n    }\n  }\n};\nWorkerSocket.prototype.send = function (data) {\n  this.socket_.postMessage(data);\n};\nWorkerSocket.prototype.close = function () {\n  this.socket_.postMessage({\n    close: true\n  });\n};\nmodule.exports = WorkerSocket;","map":null,"metadata":{},"sourceType":"script"}